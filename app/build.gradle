apply from: '../integration-test.gradle'
dependencies {
    implementation project(':data')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
}

def imageName = project.hasProperty('imageName') ? imageName : "app:local"
def releaseVersion = project.hasProperty('releaseVersion') ? releaseVersion : null

task buildDockerImage {
    dependsOn bootJar

    doLast {
        exec {
            workingDir '.'
            commandLine 'docker', 'build', '-t', "${imageName}", '--build-arg', "RELEASE_VERSION=${releaseVersion}", '.'
        }
    }
}


/*convert snippet to swagger*/
openapi3 {
    servers = [{ url = "http://localhost:8080" }, { url = "https://hairlog.jongjun.com" }]
    title = projectName
    version = projectVersion
    format = 'yaml'
    tagDescriptionsPropertiesFile = 'src/docs/tag/tag-descriptions.yaml'
    snippetsDirectory = "build/generated-snippets/"
    outputDirectory = "src/main/resources/static/"
    outputFileNamePrefix = 'openapi3'
}

postman {
    title = projectName
    version = projectVersion
    baseUrl = 'http://localhost:8080'
    outputDirectory = "src/main/resources/static/"
    outputFileNamePrefix = 'postman'
}

task copyReport {
    copy {
        from "build/reports/tests/test"
        into 'src/main/resources/static/reports'
    }
}
